[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chionesu George. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"George C (2023). smart.data: Smart Data. R package version 2.0.1.","code":"@Manual{,   title = {smart.data: Smart Data},   author = {Chionesu George},   year = {2023},   note = {R package version 2.0.1}, }"},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Smart Data","title":"Smart Data","text":"smart.data R6 class facilitates manipulation data set providing rules-based operations taxonomical column reference.","code":""},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Smart Data","text":"need install related package book..utilities","code":""},{"path":"/reference/get.smart.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Smart Object — get.smart","title":"Get a Smart Object — get.smart","text":"get.smart retrieves smart.data objects global smart-cache throws message global cache exist","code":""},{"path":"/reference/get.smart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Smart Object — get.smart","text":"","code":"get.smart(..., list.only = FALSE)"},{"path":"/reference/get.smart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Smart Object — get.smart","text":"... Names smart objects (found class member name) given symbols strings list.(logical | FALSE) TRUE existing keys smart-cache returned exiting","code":""},{"path":"/reference/get.smart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Smart Object — get.smart","text":"list retrieved smart.data objects, invisibly.","code":""},{"path":"/reference/is.smart.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Signs of Intelligence — is.smart","title":"Check for Signs of Intelligence — is.smart","text":".smart checks argument attributes objects indicating \"smart.data\" class","code":""},{"path":"/reference/is.smart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Signs of Intelligence — is.smart","text":"","code":"is.smart(...)"},{"path":"/reference/is.smart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Signs of Intelligence — is.smart","text":"... One smart.data objects","code":""},{"path":"/reference/is.smart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Signs of Intelligence — is.smart","text":"vector logical results length input.","code":""},{"path":"/reference/smart.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Smart Interaction With Data — smart.data","title":"Smart Interaction With Data — smart.data","text":"smart.data R6 class facilitates manipulation data set providing rules-based operations taxonomical column reference. need install related package book..utilities","code":""},{"path":"/reference/smart.data.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Smart Interaction With Data — smart.data","text":"data data.table =object holding current state data name label use data id unique ID object cache shared access object via cache_mem external environment smart.rules list holding user-generated sets rules","code":""},{"path":[]},{"path":"/reference/smart.data.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Smart Interaction With Data — smart.data","text":"smart.data$print() smart.data$new() smart.data$naming.rule() smart.data$taxonomy.rule() smart.data$transformation.rule() smart.data$enforce.rules() smart.data$set.private() smart.data$reset() smart.data$use() smart.data$cache_mgr() smart.data$clone()","code":""},{"path":"/reference/smart.data.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Smart Interaction With Data — smart.data","text":"print Prints contents $data invisibly returning class object","code":""},{"path":"/reference/smart.data.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$print()"},{"path":"/reference/smart.data.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Smart Interaction With Data — smart.data","text":"Initialize class object.","code":""},{"path":"/reference/smart.data.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$new(x, name = \"new.data\", ...)"},{"path":"/reference/smart.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Interaction With Data — smart.data","text":"x input data name name smart class used smart functions ... Arguments used initialize smart cache (see cache_layered).  none provided, composite cache created types memory disk, using defaults (see cache_mem cache_disk)","code":""},{"path":"/reference/smart.data.html","id":"method-naming-rule-","dir":"Reference","previous_headings":"","what":"Method naming.rule()","title":"Smart Interaction With Data — smart.data","text":"$naming.rule provides prescribed laws renaming fields found self$data.  specified fields found self$data renamed \"law\" enforced.","code":""},{"path":"/reference/smart.data.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$naming.rule(..., show = FALSE)"},{"path":"/reference/smart.data.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Interaction With Data — smart.data","text":"... Key-value pairs denoting naming scheme: new_name = old_name. Items key used name. dots_list supported. show (logical) TRUE structure rule printed console","code":""},{"path":"/reference/smart.data.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Smart Interaction With Data — smart.data","text":"invisibly returning class object, list saved self$smart.rules$for_naming containing derived objects used attribute \"law\": expression representing actions take enforced","code":""},{"path":"/reference/smart.data.html","id":"method-taxonomy-rule-","dir":"Reference","previous_headings":"","what":"Method taxonomy.rule()","title":"Smart Interaction With Data — smart.data","text":"$taxonomy.rule() sets class object $smart.rules$for_usage referenced method $use().  $taxonomy.rule creates mapping usage data type field, labeled specific terms, names fields participate. Parameter term.map data.table object following required fields: term name taxonomy term.  Defaults c(\"identifier\", \"event.date\", \"flag\", \"demographic\", \"category\", \"join.key\") desc description term's interpretation context usage rule quoted expression containing rules enforced fields mapped current term. variable field must expressed 'x' '.x' field name 'y' '.y': law enforced exists context imap fields fields $data mapped term","code":""},{"path":"/reference/smart.data.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$taxonomy.rule(   term.map = NULL,   update = FALSE,   show = FALSE,   chatty = FALSE )"},{"path":"/reference/smart.data.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Interaction With Data — smart.data","text":"term.map (NULL) 2D tabular object maps terms rules -> X ~ term<character[]> + desc<character[]> + rule<language[]> (see section 'Term Map') update (logical|TRUE) existing map updated via interactive selection? show (logical|FALSE) rule shown? chatty (logical|FALSE) additional information printed console? new.terms (data.table|NULL) link[data.table]{data.table} object additional taxonomy rules add existing ones.","code":""},{"path":"/reference/smart.data.html","id":"method-transformation-rule-","dir":"Reference","previous_headings":"","what":"Method transformation.rule()","title":"Smart Interaction With Data — smart.data","text":"$transformation.rule() updates class field $data.  Rules provided quoted expressions. given key-value pairs, key print console message enforcement (regardless value argument chatty). loops control--flow defined , object transformation must use symbol .data scoped assignment operator <<- (e.g. .data <<- 'expression')","code":""},{"path":"/reference/smart.data.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$transformation.rule(   ...,   set.active = 0,   show = FALSE,   chatty = FALSE,   update = FALSE )"},{"path":"/reference/smart.data.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Interaction With Data — smart.data","text":"... Quoted expression containing code execute desired transformations  names provided (e.g., does_this = quote(...)), name printed console rule enforcement argument chatty |codeTRUE set.active (integer[]) provided, indices self$smart.rules$for_transformation set 'active': indices set 'inactive' show (logical|FALSE) rule shown? chatty (logical|FALSE) additional information printed console? update (logical|FALSE) provided rules function updates?","code":""},{"path":"/reference/smart.data.html","id":"method-enforce-rules-","dir":"Reference","previous_headings":"","what":"Method enforce.rules()","title":"Smart Interaction With Data — smart.data","text":"$enforce.rules operates rules saved $smart.rules evaluates quoted \"law\" $data.  Custom rules can directly added class member $smart.rules: must attribute \"law\" containing quoted expression referencing object .data rule.  rule contain objects referenced quoted expression.","code":""},{"path":"/reference/smart.data.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$enforce.rules(..., chatty = FALSE)"},{"path":"/reference/smart.data.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Interaction With Data — smart.data","text":"... (string[]) names rules enforce chatty (logical|FALSE) additional execution information printed console?","code":""},{"path":"/reference/smart.data.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Smart Interaction With Data — smart.data","text":"Invisibly, class object member $data modified according rules enforced","code":""},{"path":"/reference/smart.data.html","id":"method-set-private-","dir":"Reference","previous_headings":"","what":"Method set.private()","title":"Smart Interaction With Data — smart.data","text":"$set.private operates private class list accessed internally $private using key-value pairs (.e. key = value)","code":""},{"path":"/reference/smart.data.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$set.private(...)"},{"path":"/reference/smart.data.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Interaction With Data — smart.data","text":"... named list: existing names private indicate elements overwrite","code":""},{"path":"/reference/smart.data.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Smart Interaction With Data — smart.data","text":"Invisibly, class object member $data modified according rules enforced","code":""},{"path":"/reference/smart.data.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Smart Interaction With Data — smart.data","text":"$reset restores object $data original value supplied class initiated.  Rules set state \"pending\", transformation rules set inactive (active = FALSE)","code":""},{"path":"/reference/smart.data.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$reset(chatty = TRUE)"},{"path":"/reference/smart.data.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Interaction With Data — smart.data","text":"chatty (logical | TRUE) TRUE, confirmation dialog invoked.","code":""},{"path":"/reference/smart.data.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Smart Interaction With Data — smart.data","text":"Invisibly, class object member $data modified original state","code":""},{"path":"/reference/smart.data.html","id":"method-use-","dir":"Reference","previous_headings":"","what":"Method use()","title":"Smart Interaction With Data — smart.data","text":"$use takes input taxonomy terms returns fields $data mapped term supplied.  idea provide semantic method retrieving data. arguments supplied, default return fields mapped existing terms.  Using retain = '' returns values making equivalent smart_obj$data","code":""},{"path":"/reference/smart.data.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$use(   ...,   subset = TRUE,   retain = NULL,   omit = NULL,   show = FALSE,   chatty = FALSE )"},{"path":"/reference/smart.data.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Interaction With Data — smart.data","text":"... Taxonomy terms defined self$transformation.rule: can object names strings subset list quoted expressions row-wise filter data using data.table syntax retain vector strings symbols denoting fields retain output.  Pattern-matching supported omit vector strings symbols denoting fields omit output show (logical|FALSE) rule shown? chatty (logical | TRUE) TRUE, confirmation dialog invoked.","code":""},{"path":"/reference/smart.data.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Smart Interaction With Data — smart.data","text":"self$data columns selected based terms supplied","code":""},{"path":"/reference/smart.data.html","id":"method-cache-mgr-","dir":"Reference","previous_headings":"","what":"Method cache_mgr()","title":"Smart Interaction With Data — smart.data","text":"$cache_mgr adds current object shared \"smart\" cache space (see cache_layered).  shared cache layered 'memory' followed 'disk.'","code":""},{"path":"/reference/smart.data.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$cache_mgr(action, chatty = FALSE, gcache = NULL, ...)"},{"path":"/reference/smart.data.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Interaction With Data — smart.data","text":"action One register unregister chatty (logical | TRUE) TRUE, confirmation dialog invoked. gcache predefined cache object package cachem.  NULL, memory-cache object initiated using 10% available memory (unless overridden values specified argument ...) ... Additional arguments use initializing cache object","code":""},{"path":"/reference/smart.data.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Smart Interaction With Data — smart.data","text":"objects class cloneable method.","code":""},{"path":"/reference/smart.data.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Interaction With Data — smart.data","text":"","code":"smart.data$clone(deep = FALSE)"},{"path":"/reference/smart.data.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Interaction With Data — smart.data","text":"deep Whether make deep clone.","code":""},{"path":"/reference/smart.upgrade.html","id":null,"dir":"Reference","previous_headings":"","what":"Upgrade a Smart Object — smart.upgrade","title":"Upgrade a Smart Object — smart.upgrade","text":"smart.upgrade assigns new smart.data object replace existing object.  primary use case function package upgrade, -rev objects need upgraded.  Objects $smart.rules, private$orig.data, $cache, $name preserved.","code":""},{"path":"/reference/smart.upgrade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upgrade a Smart Object — smart.upgrade","text":"","code":"smart.upgrade(..., env = globalenv(), chatty = FALSE)"},{"path":"/reference/smart.upgrade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upgrade a Smart Object — smart.upgrade","text":"... Names symbols 'smart.data' objects env environment object smart object(s) reside chatty (logical) TRUE, additional messages sent ","code":""}]
