, getter = function(self){
function(branch){
if (missing(branch)){
branch <- self@commit_log;
} else {
branch <- branch[1]
}
# browser()
path <- paste(self@git_dir, self@pkg_nm, ".git/logs/refs/heads", branch, sep = "/");
if (rlang::is_empty(path) || !dir.exists(path)){
return(character())
}
readLines(path) |>
stringi::stri_extract_all_regex(".*commit.*", simplify = TRUE, omit_no_match = TRUE) |>
as.vector() |>
purrr::discard(\(i) i == "");
}
)
)}
this_pkg <- pkg_mgr(git_dir = git_dir);
this_pkg@read_log("November2023");
this_pkg@read_log();
pkg_mgr <- { S7::new_class(
name = "pkg_mgr"
, properties = list(
git_dir = class_character
, pkg_nm = new_property(
class = S7::new_union(class_character, class_missing, S7::as_class(NULL))
, setter = \(self, value){
if (missing(value)||rlang::is_empty(value)){
value <- tcltk::tk_select.list(choices = dir(self@git_dir, include.dirs = TRUE))
}
self@pkg_nm <- value;
self
}
, default = NULL
)
, commit_log = new_property(
name = "commit_log"
, class = class_character
, default = "main"
)
, read_log = new_property(
name = "read_log"
, class = class_function
, getter = function(self){
function(branch){
if (missing(branch)){
branch <- self@commit_log;
} else {
branch <- branch[1]
}
# browser()
path <- paste(self@git_dir, self@pkg_nm, ".git/logs/refs/heads", branch, sep = "/");
if (rlang::is_empty(path) || identical(path, "")){
return(character())
}
readLines(path) |>
stringi::stri_extract_all_regex(".*commit.*", simplify = TRUE, omit_no_match = TRUE) |>
as.vector() |>
purrr::discard(\(i) i == "");
}
)
)}
this_pkg <- pkg_mgr(git_dir = git_dir);
this_pkg@read_log("November2023");
this_pkg@read_log();
this_pkg@read_log("November2023");
htmltools::tagList(
htmltools::h2("Issues")
, c(`2023-11` = "November2023", `2023-10` = "October2023", `2023-09` = "September2023", `2023-08` = "August2023") |>
purrr::imap(\(x, y){
htmltools::tagList(
htmltools::tags$span(style="font-weight:bold", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap(\(x, y){
htmltools::tags$a(href=x, target="_blank", title = y, y)
}) |>
unname()
})()
)
})
);
htmltools::tagList(
htmltools::h2("Issues")
, c(`2023-11` = "November2023", `2023-10` = "October2023", `2023-09` = "September2023", `2023-08` = "August2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
htmltools::tagList(
htmltools::tags$span(style="font-weight:bold", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap(\(x, y){
htmltools::tags$a(href=x, target="_blank", title = y, y)
}) |>
unname()
})()
)
}
})
);
htmltools::tagList(
htmltools::h2("Issues")
, c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
htmltools::tagList(
htmltools::tags$span(style="font-weight:bold", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap(\(x, y){
htmltools::tags$a(href=x, target="_blank", title = y, y)
}) |>
unname()
})()
)
}
})
);
htmltools::tagList(
htmltools::h2("Issues")
, c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
htmltools::tagList(
htmltools::tags$span(style="font-weight:bold", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap(\(x, y){
htmltools::tags$a(href=x, target="_blank", title = y, y)
}) |>
unname()
})()
)
}
})
);
htmltools::tagList(
htmltools::h2("Issues")
, c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
c(
sprintf("**%s**", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap_chr(\(x, y){
sprintf("[%s](%s \"%1$s\")", y, x)
}) |>
unname()
})()
) |> paste(collapse = "\n\n")
}
})
);
c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
c(
sprintf("**%s**", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap_chr(\(x, y){
sprintf("[%s](%s \"%1$s\")", y, x)
}) |>
unname()
})()
) |> paste(collapse = "\n\n")
}
})
c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
c(
sprintf("**%s**", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap_chr(\(x, y){
sprintf("[%s](%s \"%1$s\")", y, x)
}) |>
unname()
})()
) |> paste(collapse = "\n\n")
}
}) |>
purrr::reduce(paste, collapse = "\n\n")
c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
c(
sprintf("**%s**", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap_chr(\(x, y){
sprintf("[%s](%s \"%1$s\")", y, x)
}) |>
unname()
})()
) |> paste(collapse = "\n\n")
}
}) |>
purrr::reduce(paste, collapse = "\n\n") |>
cat()
this_pkg
c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
c(
sprintf("**%s**", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap_chr(\(x, y){
sprintf("[%s](%s \"%1$s\")", y, x)
}) |>
unname()
})()
) |> paste(collapse = "\n\n")
}
}) |>
purrr::reduce(paste, collapse = "\n\n") |>
cat(file = paste(this_pkg@git_dir, this_pkg@pkg_nm, "pkg/News.md", sep = "/"))
c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
c(
sprintf("Branch **%s** Issues Addressed", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap_chr(\(x, y){
sprintf("[%s](%s \"%1$s\")", y, x)
}) |>
unname()
})()
) |> paste(collapse = "\n\n")
}
}) |>
purrr::reduce(paste, collapse = "\n\n") |>
cat(file = paste(this_pkg@git_dir, this_pkg@pkg_nm, "pkg/News.md", sep = "/"))
c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
c(
sprintf("Branch **%s** Issues Addressed", y)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap_chr(\(x, y){
sprintf("- [%s](%s \"%1$s\")\n", y, x)
}) |>
unname()
})()
) |> paste(collapse = "\n\n")
}
}) |>
purrr::reduce(paste, collapse = "\n\n") |>
cat(file = paste(this_pkg@git_dir, this_pkg@pkg_nm, "pkg/News.md", sep = "/"))
c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
c(sprintf("## %s\n ", x)
, sprintf("Branch **%s** Issues Addressed", x)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap_chr(\(x, y){
sprintf("- [%s](%s \"%1$s\")\n", y, x)
}) |>
unname()
})()
) |> paste(collapse = "\n\n")
}
}) |>
purrr::reduce(paste, collapse = "\n\n") |>
cat(file = paste(this_pkg@git_dir, this_pkg@pkg_nm, "pkg/News.md", sep = "/"))
c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
c(sprintf("## %s ", x)
, sprintf("Branch **%s** Issues Addressed", x)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap_chr(\(x, y){
sprintf("- [%s](%s \"%1$s\")\n", y, x)
}) |>
unname()
})()
) |> paste(collapse = "\n\n")
}
}) |>
purrr::reduce(paste, collapse = "\n\n") |>
cat(file = paste(this_pkg@git_dir, this_pkg@pkg_nm, "pkg/News.md", sep = "/"))
# usethis::use_pkgdown()
# usethis::use_proprietary_license("Chionesu George")
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
c(`2023-11` = "November2023") |>
purrr::imap(\(x, y){
if (rlang::is_empty(this_pkg@read_log(branch = x))){
NULL
} else {
c(sprintf("# %s ", x)
, sprintf("Branch **%s** Issues Addressed", x)
, this_pkg@read_log(branch = x) |>
stringi::stri_extract_all_regex("\\#.*", simplify = TRUE) |>
na.omit() |>
as.vector() |>
rev() |>
unique() |>
(\(i){
out <- sprintf(
fmt = "https://github.com/delriaan/%s/issues/%s"
, this_pkg@pkg_nm
, stringi::stri_extract_first_regex(i, "(?<=\\#)[0-9]+")
) |>
rlang::set_names(stringi::stri_extract_first_regex(i, "\\#[0-9]+"));
out[!duplicated(out)] |>
purrr::imap_chr(\(x, y){
sprintf("- [%s](%s \"%1$s\")\n", y, x)
}) |>
unname()
})()
) |> paste(collapse = "\n\n")
}
}) |>
purrr::reduce(paste, collapse = "\n\n") |>
cat(file = paste(this_pkg@git_dir, this_pkg@pkg_nm, "pkg/News.md", sep = "/"))
# usethis::use_pkgdown()
# usethis::use_proprietary_license("Chionesu George")
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
paste(this_pkg@git_dir, this_pkg@pkg_nm, sep = "/") |> setwd()
paste(this_pkg@git_dir, this_pkg@pkg_nm, sep = "/") |> setwd();
# usethis::use_pkgdown()
# usethis::use_proprietary_license("Chionesu George")
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
