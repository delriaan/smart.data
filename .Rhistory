all_fields$AM
all_fields[[1]]
lapply(all_fields, rlang::eval_tidy)
all_fields <- mget(term_list, envir = self$smart.rules$for_usage) |>
purrr::map(\(i) i@fields |> unlist()) |>
purrr::compact() |>
unlist(use.names = FALSE) |>
c(retain) |>
purrr::compact() |>
purrr::discard(\(i) i %in% omit) |>
unique() |>
rlang::syms() |>
rlang::as_quosures(
env = rlang::as_data_mask(self$data[eval(rlang::enexpr(subset))])
, named = TRUE
)
data.table::data.table(lapply(all_fields, rlang::eval_tidy))
data.table::as.data.table(lapply(all_fields, rlang::eval_tidy))
library(smart.data)
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# ~ PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
names(smrt$data)
smrt$smart.rules$for_naming@law
smrt$taxonomy.rule(
identifier = new("taxonomy", term = "identifier", desc = "Identifies unique instances of a type of reference")
, flag = new("taxonomy", term = "flag", desc = "Logical indicator")
, demographic = new("taxonomy", term = "demographic", desc = "Demographic details such as name, date of birth, race, gender")
, category = new("taxonomy", term = "category", desc = "Indicates a categorical variable")
, event.date = new("taxonomy", term = "event.date", desc = "The event dates or duration boundary dates")
, join.key = new("taxonomy", term = "join.key", desc = "Indicates the field(s) to use for 'data.table' joins")
, gui = TRUE
)
# debug(smrt$use)
# smrt$smart.rules$for_usage %$% mget(ls())
smrt$enforce.rules(for_usage)
smrt$use() |> print()
smrt$use(identifier) |> print()
smrt$use(category) |> print()
smrt$use(category, omit="DISP", ) |> print()
smrt$use(category, identifier) |> print()
smrt$use(category) |> print()
smrt$use(category, omit="DISP", ) |> print()
smrt$use(category, identifier) |> print()
smrt$use(identifier) |> print()
smrt$use(retain="*", omit="WT") |> print()
debug(smrt$use)
smrt$use(category, identifier) |> print()
mget(term_list, envir = self$smart.rules$for_usage) |>
purrr::map(\(i) i@fields |> unlist()) |>
purrr::compact()
mget(term_list, envir = self$smart.rules$for_usage)
rlang::enexprs(...) |> .checkout()
rlang::enexprs(...)
rlang::enexprs(...) |> is.list()
library(smart.data)
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# ~ PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
names(smrt$data)
smrt$smart.rules$for_naming@law
smrt$taxonomy.rule(
identifier = new("taxonomy", term = "identifier", desc = "Identifies unique instances of a type of reference")
, flag = new("taxonomy", term = "flag", desc = "Logical indicator")
, demographic = new("taxonomy", term = "demographic", desc = "Demographic details such as name, date of birth, race, gender")
, category = new("taxonomy", term = "category", desc = "Indicates a categorical variable")
, event.date = new("taxonomy", term = "event.date", desc = "The event dates or duration boundary dates")
, join.key = new("taxonomy", term = "join.key", desc = "Indicates the field(s) to use for 'data.table' joins")
, gui = TRUE
)
# debug(smrt$use)
# smrt$smart.rules$for_usage %$% mget(ls())
smrt$enforce.rules(for_usage)
smrt$use() |> print()
smrt$use(identifier) |> print()
smrt$use(category) |> print()
smrt$use(category, omit="DISP", ) |> print()
smrt$use(category) |> print()
smrt$use(category, identifier) |> print()
smrt$use(retain="*", omit="WT") |> print()
#
# ~ PART II: Using the Taxonomy and Resetting ====
smrt$get.history
smrt$reset(safe = TRUE)
names(smrt$data)
smrt$smart.rules$for_naming@state
smrt$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
names(smrt$data)
# ~ PART III: Smart Cache ----
get.smart(smart_cars)$use(retain="*") |> print()
# ~ PART III: Smart Cache ----
get.smart(smart_cars)$use() |> print()
# ~ PART III: Smart Cache ----
smrt$name <- "smart_cars"
is.smart(smrt)
smrt$cache_mgr(action = upd)
get.smart(smart_cars)$data
library(smart.data)
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
library(smart.data)
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
as.name_map(list(name_map = c(A = "a", B = "z")))
as.name_map(list(name_map = c(A = "a", B = "z")), law = rlang::expr())
as.name_map(list(name_map = c(A = "a", B = "z"), law = rlang::expr()))
as.name_map(list(name_map = c(A = "a", B = "z"), law = rlang::expr(ls())))
rlang::expr(c())
as.name_map(list(name_map = c(A = "a", B = "z"), law = rlang::expr(NULL)))
as.name_map(list(name_map = c(A = "a", B = "z"), law = rlang::expr(\())))
as.name_map(list(name_map = c(A = "a", B = "z"), law = rlang::expr((\()))))
as.name_map(list(name_map = c(A = "a", B = "z"), law = rlang::expr((\(X)))))
as.name_map(list(name_map = c(A = "a", B = "z"), law = rlang::expr((\(X))))
as.name_map(list(name_map = c(A = "a", B = "z"), law = rlang::expr(eval()))
)
as.taxonomy(list(term = "test_term", desc = "test_description"))
as.name_map(list(name_map = c(A = "a", B = "z"), law = rlang::expr(eval()))
)
as.name_map(list(name_map = c(A = "a", B = "z"), law = rlang::expr(eval())))
identifier <- smart.data::as.taxonomy(list(term = "identifier", desc = "Identifies unique instances in a set"))
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse))
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> smart.data::as.taxonomy()
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse))
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> as.taxonomy()
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> jsonlite::fromJSON(x) |>
purrr::modify_at("law", str2lang)
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> jsonlite::fromJSON() |>
purrr::modify_at("law", str2lang)
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> jsonlite::fromJSON()
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> jsonlite::fromJSON() |>
purrr::modify_at("law", as.call)
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> jsonlite::fromJSON() |>
purrr::modify_at("law", as.expression)
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> jsonlite::fromJSON() |>
purrr::modify_at("law", \(i) as.expression(i) |> as.call())
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> jsonlite::fromJSON() |>
purrr::modify_at("law", \(i) as.call(str2lang(paste(i, collapse = "\n"))))
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> jsonlite::fromJSON() |>
purrr::modify_at("law", \(i) str2lang(paste(i, collapse = "\n")))
library(smart.data)
identifier <- smart.data::as.taxonomy(list(term = "identifier", desc = "Identifies unique instances in a set"))
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> smart.data::as.taxonomy()
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse))
jsonlite::toJSON(as.list(identifier) |> purrr::modify_at("law", rlang::expr_deparse)) |> jsonlite::fromJSON() |>
purrr::modify_at("law", \(i) str2lang(paste(i, collapse = "\n")))
library(smart.data)
name_map <- Nnew("name_map", name_map = rlang::set_names(LETTERS))
name_map <- new("name_map", name_map = rlang::set_names(LETTERS))
rm(name_map)
new("name_map", name_map = rlang::set_names(LETTERS))
new("name_map", name_map = rlang::set_names(letters, LETTERS))
smart.data::new("name_map", name_map = rlang::set_names(LETTERS))
library(smart.data)
names(mtcars) |> paste(collapse = ", ") |> writeClipboard()
head(mtcars)
?mtcars
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# ~ PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
smrt$taxonomy.rule(gui = TRUE)
library(smart.data)
#
# ~ PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
smrt$taxonomy.rule(gui = TRUE)
taxonomy(term = "", desc = "")
smrt$taxonomy.rule(
identifier = taxonomy(term = "identifier", desc = "Make and Model")
, performance = taxonomy(term = "performance", desc = "Performance stats")
, metrics  = taxonomy(term = "metrics", desc = "Physical Metrics")
, characteristics = taxonomy(term = "characteristics", desc = "Categorical Descriptors")
, gui = TRUE
)$enforce.rules(for_usage)
library(smart.data)
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
# names(smrt$data)
# smrt$smart.rules$for_naming@law
# :: IDENTIFIER
# make_model
# :: PERFORMANCE
# [, 1]	mpg	Miles/(US) gallon
# [, 7]	qsec	1/4 mile time
# [, 4]	hp	Gross horsepower
# :: METRICS
# [, 2]	cyl	Number of cylinders
# [, 3]	disp	Displacement (cu.in.)
# [, 5]	drat	Rear axle ratio
# [, 6]	wt	Weight (1000 lbs)
# [,10]	gear	Number of forward gears
# [,11]	carb	Number of carburetors
# :: CHARACTERISTICS
# [, 8]	vs	Engine (0 = V-shaped, 1 = straight)
# [, 9]	am	Transmission (0 = automatic, 1 = manual)
smrt$taxonomy.rule(gui = TRUE)
library(smart.data)
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
# names(smrt$data)
# smrt$smart.rules$for_naming@law
# :: IDENTIFIER
# make_model
# :: PERFORMANCE
# [, 1]	mpg	Miles/(US) gallon
# [, 7]	qsec	1/4 mile time
# [, 4]	hp	Gross horsepower
# :: METRICS
# [, 2]	cyl	Number of cylinders
# [, 3]	disp	Displacement (cu.in.)
# [, 5]	drat	Rear axle ratio
# [, 6]	wt	Weight (1000 lbs)
# [,10]	gear	Number of forward gears
# [,11]	carb	Number of carburetors
# :: CHARACTERISTICS
# [, 8]	vs	Engine (0 = V-shaped, 1 = straight)
# [, 9]	am	Transmission (0 = automatic, 1 = manual)
smrt$taxonomy.rule(gui = TRUE)
library(smart.data)
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
# names(smrt$data)
# smrt$smart.rules$for_naming@law
# :: IDENTIFIER
# make_model
# :: PERFORMANCE
# [, 1]	mpg	Miles/(US) gallon
# [, 7]	qsec	1/4 mile time
# [, 4]	hp	Gross horsepower
# :: METRICS
# [, 2]	cyl	Number of cylinders
# [, 3]	disp	Displacement (cu.in.)
# [, 5]	drat	Rear axle ratio
# [, 6]	wt	Weight (1000 lbs)
# [,10]	gear	Number of forward gears
# [,11]	carb	Number of carburetors
# :: CHARACTERISTICS
# [, 8]	vs	Engine (0 = V-shaped, 1 = straight)
# [, 9]	am	Transmission (0 = automatic, 1 = manual)
smrt$taxonomy.rule(gui = TRUE)
library(smart.data)
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
# names(smrt$data)
# smrt$smart.rules$for_naming@law
# :: IDENTIFIER
# make_model
# :: PERFORMANCE
# [, 1]	mpg	Miles/(US) gallon
# [, 7]	qsec	1/4 mile time
# [, 4]	hp	Gross horsepower
# :: METRICS
# [, 2]	cyl	Number of cylinders
# [, 3]	disp	Displacement (cu.in.)
# [, 5]	drat	Rear axle ratio
# [, 6]	wt	Weight (1000 lbs)
# [,10]	gear	Number of forward gears
# [,11]	carb	Number of carburetors
# :: CHARACTERISTICS
# [, 8]	vs	Engine (0 = V-shaped, 1 = straight)
# [, 9]	am	Transmission (0 = automatic, 1 = manual)
smrt$taxonomy.rule(gui = TRUE)
library(smart.data)
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
# names(smrt$data)
# smrt$smart.rules$for_naming@law
# :: IDENTIFIER
# make_model
# :: PERFORMANCE
# [, 1]	mpg	Miles/(US) gallon
# [, 7]	qsec	1/4 mile time
# [, 4]	hp	Gross horsepower
# :: METRICS
# [, 2]	cyl	Number of cylinders
# [, 3]	disp	Displacement (cu.in.)
# [, 5]	drat	Rear axle ratio
# [, 6]	wt	Weight (1000 lbs)
# [,10]	gear	Number of forward gears
# [,11]	carb	Number of carburetors
# :: CHARACTERISTICS
# [, 8]	vs	Engine (0 = V-shaped, 1 = straight)
# [, 9]	am	Transmission (0 = automatic, 1 = manual)
smrt$taxonomy.rule(gui = TRUE)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
debug(smrt$taxonomy.rule)
smrt$taxonomy.rule(gui = TRUE)
library(smart.data)
smrt$enforce.rules(for_usage)
# library(smart.data)
# 									mpg 	cyl disp  hp drat wt  	qsec	vs am gear carb
# Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
# Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
# Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
# Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
# Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
# Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
# names(smrt$data)
# smrt$smart.rules$for_naming@law
# :: IDENTIFIER
# make_model
# :: PERFORMANCE
# [, 1]	mpg	Miles/(US) gallon
# [, 7]	qsec	1/4 mile time
# [, 4]	hp	Gross horsepower
# :: METRICS
# [, 2]	cyl	Number of cylinders
# [, 3]	disp	Displacement (cu.in.)
# [, 5]	drat	Rear axle ratio
# [, 6]	wt	Weight (1000 lbs)
# [,10]	gear	Number of forward gears
# [,11]	carb	Number of carburetors
# :: CHARACTERISTICS
# [, 8]	vs	Engine (0 = V-shaped, 1 = straight)
# [, 9]	am	Transmission (0 = automatic, 1 = manual)
debug(smrt$taxonomy.rule)
smrt$taxonomy.rule(gui = TRUE)
modify_at(field_list, "<DATA NAMES>", rlang::zap)
purrr::modify_at(field_list, "<DATA NAMES>", rlang::zap)
library(smart.data)
# library(smart.data)
# 									mpg 	cyl disp  hp drat wt  	qsec	vs am gear carb
# Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
# Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
# Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
# Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
# Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
# Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
# names(smrt$data)
# smrt$smart.rules$for_naming@law
# :: IDENTIFIER
# make_model
# :: PERFORMANCE
# [, 1]	mpg	Miles/(US) gallon
# [, 7]	qsec	1/4 mile time
# [, 4]	hp	Gross horsepower
# :: METRICS
# [, 2]	cyl	Number of cylinders
# [, 3]	disp	Displacement (cu.in.)
# [, 5]	drat	Rear axle ratio
# [, 6]	wt	Weight (1000 lbs)
# [,10]	gear	Number of forward gears
# [,11]	carb	Number of carburetors
# :: CHARACTERISTICS
# [, 8]	vs	Engine (0 = V-shaped, 1 = straight)
# [, 9]	am	Transmission (0 = automatic, 1 = manual)
debug(smrt$taxonomy.rule)
smrt$taxonomy.rule(gui = TRUE)
sprintf("smart.data %s", packageVersion("smart.data"))
library(smart.data)
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
# names(smrt$data)
# smrt$smart.rules$for_naming@law
# :: IDENTIFIER
# make_model
# :: PERFORMANCE
# [, 1]	mpg	Miles/(US) gallon
# [, 7]	qsec	1/4 mile time
# [, 4]	hp	Gross horsepower
# :: METRICS
# [, 2]	cyl	Number of cylinders
# [, 3]	disp	Displacement (cu.in.)
# [, 5]	drat	Rear axle ratio
# [, 6]	wt	Weight (1000 lbs)
# [,10]	gear	Number of forward gears
# [,11]	carb	Number of carburetors
# :: CHARACTERISTICS
# [, 8]	vs	Engine (0 = V-shaped, 1 = straight)
# [, 9]	am	Transmission (0 = automatic, 1 = manual)
# debug(smrt$taxonomy.rule)
smrt$taxonomy.rule(identifier = taxonomy(term = "identifier", desc = "Object identifier", fields = "make_model"), gui = TRUE)
smrt$enforce.rules(for_usage)
sprintf("smart.data %s", packageVersion("smart.data"))
smrt$smart.rules
smrt$smart.rules |> mget(ls())
smrt$smart.rules %$% mget(ls())
smrt$smart.rules %$% ls()
smrt$smart.rules %$% { ls() |> modify_if(\(x) x == "for_usage", \(x) sprintf("%s (%s terms)", x, ls(get(x)) |> length()) ) }
smrt$smart.rules %$% { ls() |> purrr::modify_if(\(x) x == "for_usage", \(x) sprintf("%s (%s terms)", x, ls(get(x)) |> length()) ) }
smrt$smart.rules %$% { ls() |> purrr::modify_if(\(x) x == "for_usage", \(x) sprintf("%s (%s terms)", x, ls(get(x)) |> length()), .else = \(x) sprintf("%s (map size: %s)", x, get(x)@name_map |> length()) ) }
smrt$smart.rules %$% { ls() |> purrr::modify_if(\(x) x == "for_usage", \(x) sprintf("%s (%s terms)", x, ls(get(x)) |> length()), .else = \(x) sprintf("%s (map size: %s)", x, get(x)@name_map |> length()) ) } |> paste(collapse = "\n")
c(sprintf("smart.data %s", packageVersion("smart.data")), smrt$smart.rules %$% { ls() |> purrr::modify_if(\(x) x == "for_usage", \(x) sprintf("%s (%s terms)", x, ls(get(x)) |> length()), .else = \(x) sprintf("%s (map size: %s)", x, get(x)@name_map |> length()) ) }) |> paste(collapse = "\n")
c(sprintf("smart.data %s", packageVersion("smart.data")), smrt$smart.rules %$% { ls() |> purrr::modify_if(\(x) x == "for_usage", \(x) sprintf("%s (%s terms)", x, ls(get(x)) |> length()), .else = \(x) sprintf("%s (map size: %s)", x, get(x)@name_map |> length()) ) }) |> cat(sep = "\n- ")
c(sprintf("smart.data %s", packageVersion("smart.data")), smrt$smart.rules %$% { ls() |> purrr::modify_if(\(x) x == "for_usage", \(x) sprintf("%s (%s terms)", x, ls(get(x)) |> length()), .else = \(x) sprintf("%s (map size: %s)", x, get(x)@name_map |> length()) ) }, sprintf("$data: %s", paste(dim(mtcars), collapse = " x ")) ) |> cat(sep = "\n- ")
c(sprintf("smart.data %s", packageVersion("smart.data")), smrt$smart.rules %$% { ls() |> purrr::modify_if(\(x) x == "for_usage", \(x) sprintf("%s (%s terms)", x, ls(get(x)) |> length()), .else = \(x) sprintf("%s (map size: %s)", x, get(x)@name_map |> length()) ) }, sprintf("$data: %s", NULL) ) |> cat(sep = "\n- ")
c(sprintf("smart.data %s", packageVersion("smart.data")), smrt$smart.rules %$% { ls() |> purrr::modify_if(\(x) x == "for_usage", \(x) sprintf("%s (%s terms)", x, ls(get(x)) |> length()), .else = \(x) sprintf("%s (map size: %s)", x, get(x)@name_map |> length()) ) }, sprintf("$data: %s", character()) ) |> cat(sep = "\n- ")
library(smart.data)
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
# names(smrt$data)
# smrt$smart.rules$for_naming@law
# :: IDENTIFIER
# make_model
# :: PERFORMANCE
# [, 1]	mpg	Miles/(US) gallon
# [, 7]	qsec	1/4 mile time
# [, 4]	hp	Gross horsepower
# :: METRICS
# [, 2]	cyl	Number of cylinders
# [, 3]	disp	Displacement (cu.in.)
# [, 5]	drat	Rear axle ratio
# [, 6]	wt	Weight (1000 lbs)
# [,10]	gear	Number of forward gears
# [,11]	carb	Number of carburetors
# :: CHARACTERISTICS
# [, 8]	vs	Engine (0 = V-shaped, 1 = straight)
# [, 9]	am	Transmission (0 = automatic, 1 = manual)
# debug(smrt$taxonomy.rule)
smrt$taxonomy.rule(identifier = taxonomy(term = "identifier", desc = "Object identifier", fields = "make_model"), gui = TRUE)
smrt$enforce.rules(for_usage)
smrt
library(smart.data)
# library(smart.data)
# 									mpg 	cyl disp  hp drat wt  	qsec	vs am gear carb
# Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
# Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
# Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
# Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
# Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
# Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
orig_data <- data.table::as.data.table(mtcars, keep.rownames = TRUE) |> data.table::setnames("rn", "make_model")
data_names <- (\(x) rlang::set_names(x, toupper(x)))(names(orig_data))
#
# PART I: Functionality Tests ====
smrt <- smart.data$
new(x = orig_data, name = "smart_cars")$
naming.rule(!!!data_names)$
enforce.rules(for_naming)
smrt
smrt$taxonomy.rule(identifier = taxonomy(term = "identifier", desc = "Object identifier", fields = "make_model"), gui = TRUE)
smrt$enforce.rules(for_usage)
smrt
library(smart.data)
